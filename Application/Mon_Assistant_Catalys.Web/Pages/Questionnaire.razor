@inject IJSRuntime JSRuntime;
@using Mon_Assistant_Catalys.Web.Models
@using Mon_Assistant_Catalys.Web.Services
@using Microsoft.AspNetCore.Components.Web

<style type="text/css">
    .chat-window {
        max-width: 800px;
    }

    .chat-header {
        height: 50px;
        background-color: #343a40;
        font-family: 'Oswald', sans-serif !important;
        font-size: 28px;
        color: white;
        border-radius: 30px 30px 0px 0px;
        text-align: center;
        vertical-align: middle;
        line-height: 50px;
    }

    .bot-header {
        padding-top: 2px;
        height: 20px;
        background-color: #343a40;
        font-family: 'Oswald', sans-serif !important;
        font-size: 11px;
        color: white;
        text-align: center;
        vertical-align: middle;
    }

    .chat-area {
        height: 500px;
        background-color: #f8f9fa;
        padding: 10px 10px 10px 10px;
        overflow-x: hidden;
        overflow-x: auto;
    }

    .chat-list {
        padding: 0;
        width: 100%;
        list-style-type: none;
    }

    .chat-input {
        min-height: 80px;
        background-color: #e9ecef;
        padding: 5px 5px 5px 5px;
    }

    .message {
        width: 100%;
        display: inline-block;
        margin-bottom: 10px;
    }

    .user-datestamp {
        font-size: 12px;
        width: 100%;
        text-align: right;
    }

    .bot-datestamp {
        font-size: 12px;
        width: 100%;
        text-align: left;
    }

    .user-message-container {
        float: right;
        background-color: #17a2b8;
        border-radius: 12px;
        border-bottom-right-radius: 2px;
        position: relative;
        display: inline-block;
        word-wrap: break-word;
        font-size: 16px;
        color: white;
        padding: 15px 15px 15px 15px;
        max-width: 90%
    }

    .bot-message-container {
        float: left;
        background-color: #fd7e14;
        border-radius: 12px;
        border-bottom-left-radius: 2px;
        position: relative;
        display: inline-block;
        word-wrap: break-word;
        font-size: 16px;
        color: white;
        padding: 15px 15px 15px 15px;
        max-width: 90%
    }
</style>

<div class="chat-window">
    <div class="chat-header">Questionnaire</div>
    <div class="chat-area" id="ChatBody">
        <ul class="chat-list">
            @foreach (var msg in Messages)
            {
                <li class="message">
                    @if (msg.Type == Mon_Assistant_Catalys.Web.Models.Message.MessageType.UserMessage)
                    {
                        <div class="user-datestamp">@msg.DateStamp</div>
                        <div class="user-message-container"><div class="message-body">@msg.MessageContent</div></div> }
                    else
                    {
                        <div class="bot-datestamp">@msg.DateStamp</div>
                        <div class="bot-message-container">
                            <div class="message-body">@msg.MessageContent</div>
                            @if (msg.LinkedQuestion.ReponseApresQuestion())
                            {
                                @foreach (var reponse in msg.LinkedQuestion.Reponses)
                                {
                                    <button id="@reponse.Id" @onclick="(e => ButtonClick(reponse.Id))">@reponse.Texte</button>
                                }
                            }
                        </div>

                    }
                </li>
            }

        </ul>
    </div>
</div>




@code
{ [Parameter]
    public string fileName { get; set; }
    public Guid SessionID { get; set; } = Guid.NewGuid();
    private string UserMessage { get; set; }
    private List<Models.Message> Messages { get; set; } = new List<Models.Message>();

    public Question question { get; set; }
    public Reponse reponse { get; set; }

    Question currentQuestion = null;

    public Mon_Assistant_Catalys.Web.Models.Questionnaire questionnaire = new Mon_Assistant_Catalys.Web.Models.Questionnaire();
    QuestionnaireService context = new QuestionnaireService();

    List<Question> toDisplayTree = null;

    protected override void OnInitialized()
    {
        question = new Question();

        questionnaire = context.GetQuestionnaire();

        toDisplayTree = new List<Question>();

        toDisplayTree = context.displayTree();

        foreach (var q in questionnaire.Questions)
        {
            if (q.IdQuestion == 1)
            {
                currentQuestion = q;
            }
        }
        Messages.Add(new Models.Message() { MessageContent = currentQuestion.Texte, Type = Models.Message.MessageType.BotMessage, LinkedQuestion = currentQuestion });
    }

    private void ProcessMessage(int idQuestion)
    {
        Reponse currentRep = currentQuestion.Reponses.Find(r => r.Id == idQuestion);
        Messages.Add(new Models.Message() { MessageContent = currentRep.Texte, Type = Models.Message.MessageType.UserMessage });

        currentQuestion = currentRep.Question;
        Messages.Add(new Models.Message() { MessageContent = currentQuestion.Texte, Type = Models.Message.MessageType.BotMessage, LinkedQuestion = currentQuestion });
    }

    private void KeyUp(KeyboardEventArgs e)
    {
        //if (e.Key == "Enter")
        //ProcessMessage();
    }
    private async void ScrollChat()
    {
        await JSRuntime.InvokeAsync<string>("scrollChat");
    }

    private void ButtonClick(int idReponse)
    {
        ProcessMessage(idReponse);
    }

}

