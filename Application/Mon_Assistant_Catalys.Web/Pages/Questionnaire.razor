@inject IJSRuntime JSRuntime;
@using Mon_Assistant_Catalys.Web.Models
@using Mon_Assistant_Catalys.Web.Services
@using Microsoft.AspNetCore.Components.Web
@using System.Net;
@using System.IO;


<div class="chat-window">
    <div class="chat-area" id="ChatBody">
        <ul class="chat-list">
            @foreach (Message msg in Messages)
            {
                <li class="message">
                    @if (msg.Type == Message.MessageType.UserMessage)
                    {
                        <div class="user-datestamp">@msg.DateStamp</div>
                        <div class="user-message-container">
                            <div class="message-text">@msg.MessageContent</div>
                        </div>
                    }
                    else
                    {

                        <div class="bot-datestamp">@msg.DateStamp</div>
                        <div class="bot-message-container">
                            <div class="bot-message-text">@msg.MessageContent</div>

                            @if (msg.LinkedQuestion.IsQuestionAfterAnwser())
                            {
                                <div class="message-answers">
                                    <div class="row">
                                        @foreach (Answer answer in msg.LinkedQuestion.Answers)
                                        {
                                            <div class="col-md-12">
                                                <button id="@answer.Id" class="btn btn-outline-light btn-no-limit" @onclick="(e => ProcessMessage(answer.Id))">@answer.Text</button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                AddMessageContent(@msg.MessageContent);
                                <div class="message-answers">
                                    <button class="btn btn-outline-light btn-no-limit" @onclick="(e => GenerateFile())">Télécharger le fichier</button>
                                </div>
                            }

                        </div>

                    }
                </li>
            }
        </ul>
    </div>
</div>

@code
{ [Parameter]
    public string fileName { get; set; }
    public Guid SessionID { get; set; } = Guid.NewGuid();
    private string UserMessage { get; set; }
    private List<Models.Message> Messages { get; set; } = new List<Models.Message>();

    public Question question { get; set; }
    public Answer answer { get; set; }

    Question currentQuestion = null;

    public Mon_Assistant_Catalys.Web.Models.Questionnaire questionnaire = new Mon_Assistant_Catalys.Web.Models.Questionnaire();
    QuestionnaireService service = new QuestionnaireService();

    List<Question> toDisplayTree = null;
    public string messageContent = "";

    protected override void OnInitialized()
    {
        question = new Question();

        questionnaire = service.GetQuestionnaire();

        toDisplayTree = new List<Question>();

        toDisplayTree = service.TransformToTree();

        foreach (Question q in questionnaire.Questions)
        {
            if (q.IdQuestion == 1)
            {
                currentQuestion = q;
            }
        }
        Messages.Add(new Message() { MessageContent = currentQuestion.Text, Type = Message.MessageType.BotMessage, LinkedQuestion = currentQuestion });
    }

    private void ProcessMessage(int idQuestion)
    {
        try
        {
            Answer currentRep = currentQuestion.Answers.Find(r => r.Id == idQuestion);
            Messages.Add(new Message() { MessageContent = currentRep.Text, Type = Message.MessageType.UserMessage });

            currentQuestion = currentRep.Question;
            Messages.Add(new Message() { MessageContent = currentQuestion.Text, Type = Message.MessageType.BotMessage, LinkedQuestion = currentQuestion });
        }
        catch (Exception)
        {
        }
    }

    private async void ScrollChat()
    {
        await JSRuntime.InvokeAsync<string>("scrollChat");
    }

    /// <summary>
    ///     Génère le fichier de sortie en fin d'échange avec l'assistant.
    /// </summary>
    public void GenerateFile()
    {
        string actualDate = DateTime.Now.Day.ToString() + "-" + DateTime.Now.Month.ToString() + "-" + DateTime.Now.Year.ToString()
                    + "-" + DateTime.Now.Hour.ToString() + "h" + DateTime.Now.Minute.ToString() + "m" + DateTime.Now.Second.ToString() + "s";

        string filePath = "Files\\Fichier_sortie-" + actualDate + ".txt";

        service.CreateFile(messageContent);

        // Téléchargement du fichier
        using (WebClient client = new WebClient())
        {
            client.DownloadFile(filePath, @"C:\\temp\\test.txt");
        }

        File.Delete(filePath);

    }

    public void AddMessageContent(string messageToAdd)
    {
        messageContent = messageToAdd;
    }

}

